-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- LAB | SQL Joins --

-- Setting the working database
USE sakila;
show tables;
describe category;
describe film_category;
describe film;

-- Challenge - Joining on multiple tables -------------------------------------------------------------------------------------------------------------------------------------------------------
-- Write SQL queries to perform the following tasks using the Sakila database:

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 1. List the number of films per category.

select * from category;
select * from film_category;
select * from film;

select category_id, count(*) as number_of_films
from film_category
group by category_id
order by category_id asc;

select c.category_id, c.name, count(f.film_id) as pelis_por_categoria
from film as f
join film_category as fc on (f.film_id=fc.film_id)
join category as c on (fc.category_id=c.category_id)
group by c.category_id,c.name;

-- Método opcional --
SELECT category.name AS category_name, COUNT(film.film_id) AS number_of_films
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category.name;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 2. Retrieve the store ID, city, and country for each store.

select * from store;
select * from address;
select * from city;
select * from country;

select s.store_id, c.city, p.country
from store as s
join address as a on (s.address_id=a.address_id)
join city as c on (a.city_id=c.city_id)
join country as p on (c.country_id=p.country_id);

-- Método opcional --
select store.store_id, city.city, country.country
from store
join address on store.address_id = address.address_id
join city on address.city_id = city.city_id
join country on city.country_id = country.country_id;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 3. Calculate the total revenue generated by each store in dollars.

select * from store;
select * from payment;
select * from rental;
select * from inventory;

select store.store_id, SUM(payment.amount) as total_revenue
from payment
join rental on payment.rental_id = rental.rental_id
join inventory on rental.inventory_id = inventory.inventory_id
join store on inventory.store_id = store.store_id
group by store.store_id;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 4. Determine the average running time of films for each category.

SELECT c.category_id, c.name AS category_name, AVG(length)
 FROM film AS f
  INNER JOIN film_category AS fc ON (f.film_id=fc.film_id)
  INNER JOIN category AS c ON (fc.category_id=c.category_id)
   GROUP BY c.category_id, c.name;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Bonus:

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 5. Identify the film categories with the longest average running time.

SELECT c.category_id, c.name AS category_name, AVG(length) AS avg_time
 FROM film AS f
  INNER JOIN film_category AS fc ON (f.film_id=fc.film_id)
  INNER JOIN category AS c ON (fc.category_id=c.category_id)
   GROUP BY c.category_id, c.name
    ORDER BY avg_time DESC
     LIMIT 5;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT f.film_id, f.title, count(r.rental_id) AS num_rentals
	FROM film f
     INNER JOIN inventory i ON (f.film_id=i.film_id)
     INNER JOIN rental r ON (i.inventory_id=r.inventory_id)
     GROUP BY f.film_id, f.title
      ORDER BY num_rentals DESC
       LIMIT 10;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.film_id, f.title, r.return_date
 FROM film f
  LEFT JOIN inventory i ON (f.film_id=i.film_id)
  LEFT JOIN rental r ON (i.inventory_id=r.inventory_id)
  WHERE f.title='Academy Dinosaur' AND i.store_id=1
   ORDER BY return_date;

-- Método Opcional
select inventory.inventory_id
from inventory
join film on inventory.film_id = film.film_id
left join rental on inventory.inventory_id = rental.inventory_id and rental.return_date is null
where film.title = 'Academy Dinosaur'
and inventory.store_id = 1
and rental.rental_id is null; -- the copies (1, 2, 3 and 4) of the movie 'Academy Dinosaur' can be rented from Store 1

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory.
-- Include a column indicating whether each title is 'Available' or 'NOT available.'
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT f.title, 
 CASE WHEN IFNULL(i.inventory_id,0)=0 THEN 'NOT available' ELSE 'Available' END AS Availability
 FROM film f
  LEFT JOIN inventory i ON (f.film_id=i.film_id);

-- Método Opcional ---------------------------------------------------------------------------------------------------------------------------------
select film.title,
case
when count(inventory.inventory_id) > count(rental.rental_id) then 'Available'
else 'NOT Available'
end as availability_status
from film
left join inventory on film.film_id = inventory.film_id
left join rental on inventory.inventory_id = rental.inventory_id
and rental.return_date is null
group by film.title;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------